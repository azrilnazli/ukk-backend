<?php
namespace App\Http\Controllers\Api;

use DB;
use Auth;
use Log;
use App\Services\VideoService;

use App\Models\Video;

use App\Traits\ApiResponser;
use Illuminate\Support\Facades\Storage;

use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Route;

class VideoController extends Controller
{

    function __construct()
    {
        //$this->video = new VideoService;
    }

    static function routes(){

        Route::get('/videos/{video}/metadata', [VideoController::class, 'show']);
        Route::get('/videos/{video}/status', [VideoController::class, 'status']);

        Route::get('/video/encoding_status', [VideoController::class, 'encoding_status'])->name('videos.uploaded_encoding_status'); // API
        Route::get('/video/failed_status', [VideoController::class, 'failed_status'])->name('videos.failed_encoding_status'); // API
        Route::get('/video/{video}/conversion_progress', [\App\Http\Controllers\Video\VideoController::class, 'conversion_progress']);
        Route::get('/video/{video}/is_playable', [VideoController::class, 'is_playable']);
        Route::get('/video/{video}/is_processing', [VideoController::class, 'is_processing']);
    }


    public function is_processing(Video $video)
    {

        $status = false;
        if($video->is_processing == TRUE){
            $status = true;
        }
        return response([
            'is_processing' => $status,
        ]);
    }

    public function is_playable(Video $video)
    {

        $status = false;
        if($video->is_ready == TRUE){
            $status = true;
        }
        return response([
            'is_playable' => $status,
        ]);
    }

    public function show(Video $video)
    {

        $company = \App\Models\Company::where('user_id', auth()->user()->id )->first();
        if(is_null($company)){
            // return response as JSON
            return response([
                'status' => false // return as boolean
            ]);
        }

        return response([
            'status' => true, // return as boolean
            'video' => $video
        ]);

    }

    function encoding_status(){

        // query videos where is_processing = true
        $collection = Video::query()
                    //->select('id','original_filename')
                    ->with('company')
                    ->where('is_processing', true)
                    ->where('is_reencode', false)
                    ->get()
                    ->map( function($val, $key)  {

                        // check for progress file generated by ffmpeg
                        if(Storage::disk('assets')->exists($val->id . "/progress_all.txt")) {
                            $val['progress'] =  Storage::disk('assets')
                                                ->get( $val->id . "/progress_all.txt" );
                            return $val;
                        }
                    });

        return response()->json([
            'status' => true,
            'message' => 'request accepted',
            'encoding' => $collection->toJson(),
            'total' => $collection->count()
        ]);
    }

    function failed_status(){


        // query videos where is_processing = true
        $collection = Video::query()
                    //->select('id','original_filename')
                    ->with('company')
                    ->where('is_reencode', true)
                    ->get()
                    ->map( function($val, $key)  {

                        // check for progress file generated by ffmpeg
                        if(Storage::disk('assets')->exists($val->id . "/progress_all.txt")) {
                            $val['progress'] =  Storage::disk('assets')
                                                ->get( $val->id . "/progress_all.txt" );
                            return $val;
                        }
                    });

        return response()->json([
            'status' => true,
            'message' => 'request accepted',
            'encoding' => $collection->toJson(),
            'total' => $collection->count()
        ]);
    }

}
